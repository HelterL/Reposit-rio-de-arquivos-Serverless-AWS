{
  "service": {
    "service": "bibliotecaserverless",
    "serviceObject": {
      "name": "bibliotecaserverless"
    },
    "provider": {
      "environment": {
        "Bucket": "exemplobucketname",
        "DatabaseName": "serverlessexemploaplicacao",
        "DatabaseUser": "teste321",
        "DatabasePassword": "1234teste321",
        "RDSEndpoint": {
          "Fn::GetAtt": [
            "DBinstanceRDSMysql",
            "Endpoint.Address"
          ]
        },
        "BUCKET_NAME": "exemplobucketname",
        "DB_NAME": "serverlessexemploaplicacao",
        "USER_NAME_DB": "teste321",
        "USER_PASSWORD_DB": "1234teste321"
      },
      "name": "aws",
      "endpointType": "REGIONAL",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "region": "us-east-1",
      "memorySize": 512,
      "lambdaHashingVersion": "20201221",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket",
            "s3:ListObject"
          ],
          "Resource": "arn:aws:s3:::exemplobucketname/*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish",
            "sns:Subscribe"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ObjetocriadoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bibliotecaserverless-dev-objetocriado"
            }
          },
          "ConsultardbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bibliotecaserverless-dev-consultardb"
            }
          },
          "ListarLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bibliotecaserverless-dev-listar"
            }
          },
          "EnviarsmsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bibliotecaserverless-dev-enviarsms"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "bibliotecaserverless",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bibliotecaserverless-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bibliotecaserverless-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "bibliotecaserverless",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ObjetocriadoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bibliotecaserverless/dev/1637619787173-2021-11-22T22:23:07.173Z/bibliotecaserverless.zip"
              },
              "Handler": "handler.objetocriado",
              "Runtime": "nodejs14.x",
              "FunctionName": "bibliotecaserverless-dev-objetocriado",
              "MemorySize": 512,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "Bucket": "exemplobucketname",
                  "DatabaseName": "serverlessexemploaplicacao",
                  "DatabaseUser": "teste321",
                  "DatabasePassword": "1234teste321",
                  "RDSEndpoint": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"RDSEndpoint\"]"
                  },
                  "BUCKET_NAME": "exemplobucketname",
                  "DB_NAME": "serverlessexemploaplicacao",
                  "USER_NAME_DB": "teste321",
                  "USER_PASSWORD_DB": "1234teste321"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObjetocriadoLogGroup"
            ]
          },
          "ConsultardbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bibliotecaserverless/dev/1637619787173-2021-11-22T22:23:07.173Z/bibliotecaserverless.zip"
              },
              "Handler": "handler.consultardb",
              "Runtime": "nodejs14.x",
              "FunctionName": "bibliotecaserverless-dev-consultardb",
              "MemorySize": 512,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "Bucket": "exemplobucketname",
                  "DatabaseName": "serverlessexemploaplicacao",
                  "DatabaseUser": "teste321",
                  "DatabasePassword": "1234teste321",
                  "RDSEndpoint": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"RDSEndpoint\"]"
                  },
                  "BUCKET_NAME": "exemplobucketname",
                  "DB_NAME": "serverlessexemploaplicacao",
                  "USER_NAME_DB": "teste321",
                  "USER_PASSWORD_DB": "1234teste321"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConsultardbLogGroup"
            ]
          },
          "ListarLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bibliotecaserverless/dev/1637619787173-2021-11-22T22:23:07.173Z/bibliotecaserverless.zip"
              },
              "Handler": "handler.listar",
              "Runtime": "nodejs14.x",
              "FunctionName": "bibliotecaserverless-dev-listar",
              "MemorySize": 512,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "Bucket": "exemplobucketname",
                  "DatabaseName": "serverlessexemploaplicacao",
                  "DatabaseUser": "teste321",
                  "DatabasePassword": "1234teste321",
                  "RDSEndpoint": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"RDSEndpoint\"]"
                  },
                  "BUCKET_NAME": "exemplobucketname",
                  "DB_NAME": "serverlessexemploaplicacao",
                  "USER_NAME_DB": "teste321",
                  "USER_PASSWORD_DB": "1234teste321"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListarLogGroup"
            ]
          },
          "EnviarsmsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/bibliotecaserverless/dev/1637619787173-2021-11-22T22:23:07.173Z/bibliotecaserverless.zip"
              },
              "Handler": "handler.enviarsms",
              "Runtime": "nodejs14.x",
              "FunctionName": "bibliotecaserverless-dev-enviarsms",
              "MemorySize": 512,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "Bucket": "exemplobucketname",
                  "DatabaseName": "serverlessexemploaplicacao",
                  "DatabaseUser": "teste321",
                  "DatabasePassword": "1234teste321",
                  "RDSEndpoint": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"RDSEndpoint\"]"
                  },
                  "BUCKET_NAME": "exemplobucketname",
                  "DB_NAME": "serverlessexemploaplicacao",
                  "USER_NAME_DB": "teste321",
                  "USER_PASSWORD_DB": "1234teste321"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EnviarsmsLogGroup"
            ]
          },
          "ObjetocriadoLambdaVersionH1eoouauZB4PfJceFIAW4EccQw4ZSFHSYuflItLHI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObjetocriadoLambdaFunction"
              },
              "CodeSha256": "O/aSxQ8dOG/mGT5NPfSlSPSPlwMqpDj0M+FP1fn5DQo="
            }
          },
          "ConsultardbLambdaVersionIQ5Ceo0cbJozDiJrTRzApSe4t9jQAv3o5Dyfq7swA8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConsultardbLambdaFunction"
              },
              "CodeSha256": "O/aSxQ8dOG/mGT5NPfSlSPSPlwMqpDj0M+FP1fn5DQo="
            }
          },
          "ListarLambdaVersionrINNOByBnUTIHGSTlL1RRLF2zlyGMkyedy7YVkn00I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListarLambdaFunction"
              },
              "CodeSha256": "O/aSxQ8dOG/mGT5NPfSlSPSPlwMqpDj0M+FP1fn5DQo="
            }
          },
          "EnviarsmsLambdaVersion20tL2IHtMuqvBXQZiThcIA9Hcl0T69VdqTDjZLgV7ns": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EnviarsmsLambdaFunction"
              },
              "CodeSha256": "O/aSxQ8dOG/mGT5NPfSlSPSPlwMqpDj0M+FP1fn5DQo="
            }
          },
          "S3BucketExemplobucketname": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "exemplobucketname",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "ObjetocriadoLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Filter": {
                      "S3Key": {
                        "Rules": [
                          {
                            "Name": "prefix",
                            "Value": "Artigos/"
                          },
                          {
                            "Name": "suffix",
                            "Value": ".pdf"
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "ObjetocriadoLambdaPermissionExemplobucketnameS3"
            ]
          },
          "ObjetocriadoLambdaPermissionExemplobucketnameS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObjetocriadoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::exemplobucketname"
                  ]
                ]
              },
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-bibliotecaserverless",
              "EndpointConfiguration": {
                "Types": [
                  "REGIONAL"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApimysql": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api_mysql",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApilist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api_list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApisms": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api_sms",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApimysqlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApimysql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApilistOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApilist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApismsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApisms"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApimysqlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApimysql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConsultardbLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "ConsultardbLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApilistGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApilist"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListarLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "ListarLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApismsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApisms"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EnviarsmsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "{ \"phone\" : \"$input.params('phone')\", \"personalname\" : \"$input.params('personalname')\" }",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "EnviarsmsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1637619774157": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodApimysqlOptions",
              "ApiGatewayMethodApilistOptions",
              "ApiGatewayMethodApismsOptions",
              "ApiGatewayMethodApimysqlGet",
              "ApiGatewayMethodApilistGet",
              "ApiGatewayMethodApismsGet"
            ]
          },
          "ConsultardbLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConsultardbLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListarLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListarLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EnviarsmsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EnviarsmsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "MfaConfiguration": "OFF",
              "UserPoolName": "test-user-pool-dev",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "Schema": [
                {
                  "Name": "email",
                  "Required": true,
                  "Mutable": true
                }
              ],
              "UsernameConfiguration": {
                "CaseSensitive": false
              },
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireLowercase": true,
                  "RequireNumbers": true,
                  "RequireSymbols": true,
                  "RequireUppercase": true,
                  "TemporaryPasswordValidityDays": 31
                }
              },
              "AccountRecoverySetting": {
                "RecoveryMechanisms": [
                  {
                    "Name": "verified_email",
                    "Priority": 1
                  }
                ]
              },
              "VerificationMessageTemplate": {
                "DefaultEmailOption": "CONFIRM_WITH_LINK"
              },
              "EmailVerificationSubject": "Seu link de verificação projeto serverless",
              "EmailVerificationMessage": "Clique no link abaixo para verificar seu endereço de e-mail. {####}"
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "test-user-pool-client-dev",
              "GenerateSecret": false,
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "SupportedIdentityProviders": [
                "COGNITO"
              ],
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthFlows": [
                "code"
              ],
              "AllowedOAuthScopes": [
                "email",
                "openid",
                "profile",
                "phone",
                "aws.cognito.signin.user.admin"
              ],
              "CallbackURLs": [
                "https://test-dev-pool.com"
              ]
            }
          },
          "CognitoUserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "Domain": "test-dev-pool",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              }
            }
          },
          "DBinstanceRDSMysql": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
              "DBInstanceIdentifier": "BibliotecaServerless",
              "DBName": "serverlessexemploaplicacao",
              "DBInstanceClass": "db.t2.micro",
              "AllocatedStorage": 20,
              "StorageType": "gp2",
              "Engine": "MySQL",
              "EngineVersion": "8.0.23",
              "MasterUsername": "teste321",
              "MasterUserPassword": "1234teste321",
              "PubliclyAccessible": true,
              "AvailabilityZone": "us-east-1a",
              "CACertificateIdentifier": "rds-ca-2019",
              "EnableCloudwatchLogsExports": [
                "general"
              ],
              "Tags": [
                {
                  "Key": "DBMysql",
                  "Value": "Serverless"
                }
              ],
              "LicenseModel": "general-public-license",
              "MaxAllocatedStorage": 30,
              "UseDefaultProcessorFeatures": true
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-bibliotecaserverless-dev-ServerlessDeploymentBucketName"
            }
          },
          "ObjetocriadoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObjetocriadoLambdaVersionH1eoouauZB4PfJceFIAW4EccQw4ZSFHSYuflItLHI"
            },
            "Export": {
              "Name": "sls-bibliotecaserverless-dev-ObjetocriadoLambdaFunctionQualifiedArn"
            }
          },
          "ConsultardbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConsultardbLambdaVersionIQ5Ceo0cbJozDiJrTRzApSe4t9jQAv3o5Dyfq7swA8"
            },
            "Export": {
              "Name": "sls-bibliotecaserverless-dev-ConsultardbLambdaFunctionQualifiedArn"
            }
          },
          "ListarLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListarLambdaVersionrINNOByBnUTIHGSTlL1RRLF2zlyGMkyedy7YVkn00I"
            },
            "Export": {
              "Name": "sls-bibliotecaserverless-dev-ListarLambdaFunctionQualifiedArn"
            }
          },
          "EnviarsmsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EnviarsmsLambdaVersion20tL2IHtMuqvBXQZiThcIA9Hcl0T69VdqTDjZLgV7ns"
            },
            "Export": {
              "Name": "sls-bibliotecaserverless-dev-EnviarsmsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "API-Endpoint"
            }
          },
          "BucketName": {
            "Description": "Nome do Bucket",
            "Value": "exemplobucketname",
            "Export": {
              "Name": "BucketName"
            }
          },
          "UserPoolClientName": {
            "Description": "Nome do pool cognito",
            "Value": "test-user-pool-client-dev",
            "Export": {
              "Name": "UserPoolClientName"
            }
          },
          "UserPoolId": {
            "Description": "ID do pool cognito",
            "Value": {
              "Ref": "CognitoUserPool"
            }
          },
          "UserPoolClientId": {
            "Description": "ID do cliente de aplicativo",
            "Value": {
              "Ref": "CognitoUserPoolClient"
            }
          },
          "EndpointAddressDBRDS": {
            "Description": "Endereco do endpoint do RDS Mysql.",
            "Value": {
              "Fn::GetAtt": [
                "DBinstanceRDSMysql",
                "Endpoint.Address"
              ]
            },
            "Export": {
              "Name": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "EndpointAddress"
                  ]
                ]
              }
            }
          },
          "EndpointPort": {
            "Description": "Porta do endpoint do RDS Mysql.",
            "Value": {
              "Fn::GetAtt": [
                "DBinstanceRDSMysql",
                "Endpoint.Port"
              ]
            },
            "Export": {
              "Name": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "EndpointPort"
                  ]
                ]
              }
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "bucket": "exemplobucketname",
      "DBNameRDS": "serverlessexemploaplicacao",
      "MasteruserRDS": "teste321",
      "PassworduserRDS": "1234teste321",
      "defaultStage": "dev",
      "currentStage": "dev",
      "userPoolName": "test-user-pool-dev",
      "userPoolClientName": "test-user-pool-client-dev",
      "remover": {
        "buckets": [
          "exemplobucketname"
        ]
      },
      "output": {
        "file": "outputs.toml"
      }
    },
    "plugins": [
      "serverless-dotenv-plugin",
      "serverless-stack-output",
      "serverless-s3-remover"
    ],
    "pluginsData": {},
    "functions": {
      "objetocriado": {
        "handler": "handler.objetocriado",
        "events": [
          {
            "s3": {
              "bucket": "exemplobucketname",
              "event": "s3:ObjectCreated:*",
              "private": false,
              "cors": true,
              "rules": [
                {
                  "prefix": "Artigos/"
                },
                {
                  "suffix": ".pdf"
                }
              ]
            }
          }
        ],
        "name": "bibliotecaserverless-dev-objetocriado",
        "package": {},
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ObjetocriadoLambdaVersionH1eoouauZB4PfJceFIAW4EccQw4ZSFHSYuflItLHI"
      },
      "consultardb": {
        "handler": "handler.consultardb",
        "events": [
          {
            "http": {
              "path": "api_mysql",
              "method": "get",
              "integration": "AWS",
              "private": false,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                  }
                }
              }
            }
          }
        ],
        "name": "bibliotecaserverless-dev-consultardb",
        "package": {},
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ConsultardbLambdaVersionIQ5Ceo0cbJozDiJrTRzApSe4t9jQAv3o5Dyfq7swA8"
      },
      "listar": {
        "handler": "handler.listar",
        "events": [
          {
            "http": {
              "path": "api_list",
              "method": "get",
              "integration": "AWS",
              "private": false,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"consultardb\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "bibliotecaserverless-dev-listar",
        "package": {},
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListarLambdaVersionrINNOByBnUTIHGSTlL1RRLF2zlyGMkyedy7YVkn00I"
      },
      "enviarsms": {
        "handler": "handler.enviarsms",
        "events": [
          {
            "http": {
              "path": "api_sms",
              "method": "get",
              "integration": "AWS",
              "private": false,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "template": {
                  "application/json": "{ \"phone\" : \"$input.params('phone')\", \"personalname\" : \"$input.params('personalname')\" }"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"consultardb\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "bibliotecaserverless-dev-enviarsms",
        "package": {},
        "memory": 512,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EnviarsmsLambdaVersion20tL2IHtMuqvBXQZiThcIA9Hcl0T69VdqTDjZLgV7ns"
      }
    },
    "resources": {
      "Resources": {
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "MfaConfiguration": "OFF",
            "UserPoolName": "test-user-pool-dev",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "Schema": [
              {
                "Name": "email",
                "Required": true,
                "Mutable": true
              }
            ],
            "UsernameConfiguration": {
              "CaseSensitive": false
            },
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireLowercase": true,
                "RequireNumbers": true,
                "RequireSymbols": true,
                "RequireUppercase": true,
                "TemporaryPasswordValidityDays": 31
              }
            },
            "AccountRecoverySetting": {
              "RecoveryMechanisms": [
                {
                  "Name": "verified_email",
                  "Priority": 1
                }
              ]
            },
            "VerificationMessageTemplate": {
              "DefaultEmailOption": "CONFIRM_WITH_LINK"
            },
            "EmailVerificationSubject": "Seu link de verificação projeto serverless",
            "EmailVerificationMessage": "Clique no link abaixo para verificar seu endereço de e-mail. {####}"
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "test-user-pool-client-dev",
            "GenerateSecret": false,
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "SupportedIdentityProviders": [
              "COGNITO"
            ],
            "AllowedOAuthFlowsUserPoolClient": true,
            "AllowedOAuthFlows": [
              "code"
            ],
            "AllowedOAuthScopes": [
              "email",
              "openid",
              "profile",
              "phone",
              "aws.cognito.signin.user.admin"
            ],
            "CallbackURLs": [
              "https://test-dev-pool.com"
            ]
          }
        },
        "CognitoUserPoolDomain": {
          "Type": "AWS::Cognito::UserPoolDomain",
          "Properties": {
            "Domain": "test-dev-pool",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            }
          }
        },
        "DBinstanceRDSMysql": {
          "Type": "AWS::RDS::DBInstance",
          "Properties": {
            "DBInstanceIdentifier": "BibliotecaServerless",
            "DBName": "serverlessexemploaplicacao",
            "DBInstanceClass": "db.t2.micro",
            "AllocatedStorage": 20,
            "StorageType": "gp2",
            "Engine": "MySQL",
            "EngineVersion": "8.0.23",
            "MasterUsername": "teste321",
            "MasterUserPassword": "1234teste321",
            "PubliclyAccessible": true,
            "AvailabilityZone": "us-east-1a",
            "CACertificateIdentifier": "rds-ca-2019",
            "EnableCloudwatchLogsExports": [
              "general"
            ],
            "Tags": [
              {
                "Key": "DBMysql",
                "Value": "Serverless"
              }
            ],
            "LicenseModel": "general-public-license",
            "MaxAllocatedStorage": 30,
            "UseDefaultProcessorFeatures": true
          }
        }
      },
      "Outputs": {
        "BucketName": {
          "Description": "Nome do Bucket",
          "Value": "exemplobucketname",
          "Export": {
            "Name": "BucketName"
          }
        },
        "UserPoolClientName": {
          "Description": "Nome do pool cognito",
          "Value": "test-user-pool-client-dev",
          "Export": {
            "Name": "UserPoolClientName"
          }
        },
        "UserPoolId": {
          "Description": "ID do pool cognito",
          "Value": {
            "Ref": "CognitoUserPool"
          }
        },
        "UserPoolClientId": {
          "Description": "ID do cliente de aplicativo",
          "Value": {
            "Ref": "CognitoUserPoolClient"
          }
        },
        "EndpointAddressDBRDS": {
          "Description": "Endereco do endpoint do RDS Mysql.",
          "Value": {
            "Fn::GetAtt": [
              "DBinstanceRDSMysql",
              "Endpoint.Address"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "EndpointAddress"
                ]
              ]
            }
          }
        },
        "EndpointPort": {
          "Description": "Porta do endpoint do RDS Mysql.",
          "Value": {
            "Fn::GetAtt": [
              "DBinstanceRDSMysql",
              "Endpoint.Port"
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "EndpointPort"
                ]
              ]
            }
          }
        },
        "ServiceEndpoint": {
          "Export": {
            "Name": "API-Endpoint"
          }
        }
      }
    },
    "configValidationMode": "off",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "useDotenv": true,
      "configValidationMode": "off",
      "frameworkVersion": "2",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\xampp\\htdocs\\serverless\\NovaversaoTCC\\.serverless\\bibliotecaserverless.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/bibliotecaserverless/dev/1637619787173-2021-11-22T22:23:07.173Z",
    "artifact": "bibliotecaserverless.zip"
  }
}